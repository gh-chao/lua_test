-- 变量


--[[
全局变量
在默认情况下，变量总是认为是全局的。
全局变量不需要声明，给一个变量赋值后即创建了这个全局变量，访问一个没有初始化的全局变量也不会出错，只不过得到的结果是：nil。
--]]


print(var);

var = 100;

print(var);

-- 如果你想删除一个全局变量，只需要将变量赋值为nil。

var = nil;

-- 这样变量var就好像从没被使用过一样。换句话说, 当且仅当一个变量不等于nil时，这个变量即存在。

print(var);


--[[
局部变量
local 显示声明为局部变量
局部变量的作用域为从声明位置开始到所在语句块结束。

应该尽可能的使用局部变量，有两个好处：
    1. 避免命名冲突。
    2. 访问局部变量的速度比全局变量更快。
--]]



a = 5               -- 全局变量
local b = 5         -- 局部变量

function joke()
    c = 5           -- 全局变量
    local d = 6     -- 局部变量
end

joke()
print(c,d)          --> 5 nil

do 
    local a = 6     -- 局部变量
    b = 6           -- 全局变量
    print(a,b);     --> 6 6
end

print(a,b)      --> 5 6




-- 赋值语句
a = "hello" .. "world"

-- Lua可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量
-- 当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：
-- a. 变量个数 > 值的个数             按变量个数补足nil
-- b. 变量个数 < 值的个数             多余的值会被忽略
a, b = 10, 2*x 


-- 遇到赋值语句Lua会先计算右边所有的值然后再执行赋值操作，所以我们可以这样进行交换变量的值：
x, y = y, x

